<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.javaboy.vhr.mapper.EmployeeRemoveMapper" >
  <resultMap id="BaseResultMap" type="org.javaboy.vhr.model.EmployeeRemove" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="afterDepId" property="afterDepId" jdbcType="INTEGER" />
    <result column="afterJobId" property="afterJobId" jdbcType="INTEGER" />
    <result column="removeDate" property="removeDate" jdbcType="DATE" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, eid, afterDepId, afterJobId, removeDate, reason, remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from employeeremove
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from employeeremove
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.javaboy.vhr.model.EmployeeRemove" >
    insert into employeeremove (id, eid, afterDepId, 
      afterJobId, removeDate, reason, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{eid,jdbcType=INTEGER}, #{afterDepId,jdbcType=INTEGER},
      #{afterJobId,jdbcType=INTEGER}, #{removeDate,jdbcType=DATE}, #{reason,jdbcType=VARCHAR},
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.javaboy.vhr.model.EmployeeRemove" useGeneratedKeys="true"
          keyProperty="id">
    insert into employeeremove
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="eid != null" >
        eid,
      </if>
      <if test="afterDepId != null" >
        afterDepId,
      </if>
      <if test="afterJobId != null" >
        afterJobId,
      </if>
      <if test="removeDate != null" >
        removeDate,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="eid != null" >
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="afterDepId != null" >
        #{afterDepId,jdbcType=INTEGER},
      </if>
      <if test="afterJobId != null" >
        #{afterJobId,jdbcType=INTEGER},
      </if>
      <if test="removeDate != null" >
        #{removeDate,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.javaboy.vhr.model.EmployeeRemove" >
    update employeeremove
    <set >
      <if test="eid != null" >
        eid = #{eid,jdbcType=INTEGER},
      </if>
      <if test="afterDepId != null" >
        afterDepId = #{afterDepId,jdbcType=INTEGER},
      </if>
      <if test="afterJobId != null" >
        afterJobId = #{afterJobId,jdbcType=INTEGER},
      </if>
      <if test="removeDate != null" >
        removeDate = #{removeDate,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.javaboy.vhr.model.EmployeeRemove" >
    update employeeremove
    set eid = #{eid,jdbcType=INTEGER},
      afterDepId = #{afterDepId,jdbcType=INTEGER},
      afterJobId = #{afterJobId,jdbcType=INTEGER},
      removeDate = #{removeDate,jdbcType=DATE},
      reason = #{reason,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getEmployeeRemoveByPage" resultMap="BaseResultMap">
    select * from employeeremove er where 1=1
    <if test="employeeRemove.reason !=null">
      and er.reason like concat('%', #{employeeRemove.reason}, '%')
    </if>
    <if test="beginDateScope !=null">
      and er.removeDate between #{beginDateScope[0]} and #{beginDateScope[1]}
    </if>
    <if test="employeeRemove.afterDepId">
      and er.afterDepId = #{employeeRemove.afterDepId}
    </if>
    <if test="employeeRemove.afterJobId">
      and er.afterJobId = #{employeeRemove.afterJobId}
    </if>
    <if test="page !=null and size!=null">
      limit #{page},#{size}
    </if>
  </select>
  <select id="getTotal" resultType="java.lang.Long">
    select count(*) from employeeremove er
    <where>
      <if test="employeeRemove!=null">
        <if test="employeeRemove.eid !=null">
          and er.eid #{employeeRemove.eid}
        </if>
        <if test="employeeRemove.reason !=null">
          and er.reason like concat('%', #{employeeRemove.reason}, '%')
        </if>
      </if>
      <if test="beginDateScope !=null">
        and er.removeDate between #{beginDateScope[0]} and #{beginDateScope[1]}
      </if>
      <if test="employeeRemove.afterDepId">
        and er.afterDepId = #{employeeRemove.afterDepId}
      </if>
      <if test="employeeRemove.afterJobId">
        and er.afterJobId = #{employeeRemove.afterJobId}
      </if>
    </where>
  </select>
  <select id="getEmployeeRemoveById" resultMap="BaseResultMap">
    select * from employeeremove er where er.`id`=#{id}
  </select>
</mapper>